#pragma once

#include "Header.h"
#include "SceneManager.h"
#include "ITMManager.h"

class GLUIEngine
{
	static GLUIEngine* instance;


private:

	GLfloat intrinsics[16] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
	//float Calib[11] = { 580.8857f, 583.317f, 319.5f, 239.5f, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 8000.0 }; // Kinect v1 data
	float Znear = 0.05f;
	float Zfar = 10.0f;

	GLfloat light_pos[4] = { 0.0, 0.0, 2.0, 0.0 }; //{ 1.0, 1.0, 0.0, 0.0 };
	GLfloat ambientLight[4] = { 0.2f, 0.2f, 0.2f, 1.0f };
	GLfloat diffuseLight[4] = { 0.8f, 0.8f, 0.8f, 1.0f };

	int mouseState;
	cv::Vec2i mouseLastClick;
	bool mouseWarped; // To avoid the extra motion generated by glutWarpPointer

	// angle of rotation for the camera direction
	float anglex = 0.0f;
	float angley = 0.0f;

	// actual vector representing the camera's direction
	float lx = 0.0f, ly = 0.0f, lz = -1.0f;
	float lxStrap = -1.0f, lyStrap = 0.0f, lzStrap = 0.0f;


	// XZ position of the camera
	float x = 0.0f, y = 0.0f, z = 1.0f; //0.15f;//
	float deltaAnglex = 0.0f;
	float deltaAngley = 0.0f;
	float deltaMove = 0;
	float deltaStrap = 0;
	int xOrigin = -1;
	int yOrigin = -1;

	//SceneManager
	//SceneManager *sceneManager;
	unique_ptr<SceneManager> sceneManager;
	unique_ptr<MyITMNamespase::ITMManager> ITMMng;


public:
	static GLUIEngine* Instance(void) {
		if (instance == NULL) {
			instance = new GLUIEngine();
		}
		return instance;
	}
	GLUIEngine();
	~GLUIEngine();

	static void computePos(float deltaMove, float deltaStrap);
	static void glutDisplayFunction();
	static void glutIdleFunction();
	static void glutKeyUpFunction(unsigned char key, int x, int y);
	static void pressKey(int key, int xx, int yy);
	static void releaseKey(int key, int x, int y);
	static void glutMouseButtonFunction(int button, int state, int x, int y);
	static void glutMouseMoveFunction(int x, int y);
	static void glutMouseWheelFunction(int button, int dir, int x, int y);

	static void setCameraPoseFunction();


	void Initialise(int & argc, char** argv);
	void Shutdown();

	void Run(cl_context context, cl_device_id device);

	void ProcessFrame();
};

